///////////////////////////////////////////////////////////////////////////////
// Generator.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Generator.h"
#include "Traj7Seg.h"
#include "GlobalData.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()


extern GlobalClass global;
///////////////////////////////////////////////////////////////////////////////
// CGenerator
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CGenerator
BEGIN_INTERFACE_MAP(CGenerator)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CGenerator)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CGenerator)
IMPLEMENT_ITCADI(CGenerator)
IMPLEMENT_ITCWATCHSOURCE(CGenerator)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CGenerator 
BEGIN_SETOBJPARA_MAP(CGenerator)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_GeneratorParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CGenerator 
BEGIN_GETOBJPARA_MAP(CGenerator)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_GeneratorParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CGenerator
BEGIN_OBJPARAWATCH_MAP(CGenerator)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CGenerator
BEGIN_OBJDATAAREA_MAP(CGenerator)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_GeneratorInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_GeneratorOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()

char GUI_GetNextCMD1;
Traj7Seg trajectory;
TrajectoryPointList<double> targetPoints[6];
int index_point = 0;
double actualPos[6];
double targetPos[8];
//double toolParam[8] = { 1,0,0,0,0,0,0,0 };
double t1, t2, t3;
int i = 0;
int indexOfGui = 0;
double P0[8];
double P1[8];
double P2[8];
double P3[4];
TrajectoryPointList<double> d1[6];
TrajectoryPointList<double> d2[6];
TrajectoryPointList<double> d3[6];
int indexPre = 0;
int indexNext = 0;
bool is_first, is_end;
double DQCurrentPosition[8];
double res[6];
double DQPath[8];

///////////////////////////////////////////////////////////////////////////////
CGenerator::CGenerator()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CGenerator::~CGenerator()
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CGenerator)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CGenerator::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CGenerator::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller();

	// Cleanup if transition failed at some stage
	if (FAILED(hr))
	{
		RemoveModuleFromCaller();
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CGenerator::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller();

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CGenerator::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CGenerator::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	if (global.GUI_GetNextCMD == 1) {
		global.GUI_GetNextCMD = 0;
		index_point = 0;
		for (i = 0; i < 6; i++) {
			actualPos[i] = (static_cast<double>(global.ActualPosition[i])) * trajectory.PulsToDegFactor1[i];
			targetPos[i] = /*actualPos[i] +*/ (global.GUI_TargetPosition[i]);
			targetPoints[i].clearAll();
			d1[i].clearAll();
			d2[i].clearAll();
			d3[i].clearAll();
			//targetPos[i] = (double)(global.GUI_TargetPosition[i]);
		}
		targetPos[6] = global.GUI_TargetPosition[6];
		targetPos[7] = global.GUI_TargetPosition[7];
		switch (global.GUI_Manager)
		{
		case 8: //PTP
			trajectory.PTPList(actualPos, targetPos, targetPoints);
			break;
		case 10: //PTP Position XYZ ABC
			trajectory.PTPCartesian(actualPos, targetPos , targetPoints);
			break;
		//case 12: //CIRC
		//	for (i = 0; i < 6; i++) {
		//		actualPos[i] = (actualPos[i] * M_PI) / 180.0; //to radian
		//	}
		//	trajectory.CIRC(actualPos, trajectory.point2Circ, trajectory.point3Circ, targetPoints);
		//	break;
		case 16: //LIN or CIRC
			while (m_Outputs.GUI_Buff[indexOfGui] != 3) {
				//if first and calculation p0
				if (indexOfGui == 0) // first
				{
					is_first = true;
					for (i = 0; i < 6; i++) {
						P0[i] = actualPos[i] * M_PI / 180.0; //radian
					}
					trajectory.GetCartPos(P0, trajectory.toolParamGlobal, DQCurrentPosition);
				}
				else
				{
					is_first = false;
					for (i = 0; i < 8; i++) {
						DQCurrentPosition[i] = d2[i].q[indexNext]; // degree
					}
				}
				// fill d1
				if (m_Outputs.GUI_Buff[indexOfGui] == 1) // LIN
				{
					for (i = 0; i < 8; i++) {
						P1[i] = m_Outputs.GUI_Buff[++indexOfGui];
					}
					if (m_Outputs.GUI_Buff[indexOfGui] == 3) // END of Buff
					{
						is_end = true;
					}
					else
					{
						is_end = false;
					}
					trajectory.LIN(DQCurrentPosition, P1, trajectory.toolParamGlobal, is_first, is_end, d1);
				}
				else if (m_Outputs.GUI_Buff[indexOfGui] == 2) // CIRC
				{
					//for (i = 0; i < 8; i++) {
					//	P1[i] = m_Outputs.GUI_Buff[++indexOfGui]; // xyz abc,  f, aproximation radius
					//}
					//// the helper point with only xyz and Ta
					//for (i = 0; i < 4; i++) {
					//	P3[i] = m_Outputs.GUI_Buff[++indexOfGui];
					//}
					//for (i = 0; i < 6; i++) {
					//	P0[i] = (P0[i] * M_PI) / 180.0; //to radian
					//}
					//trajectory.CIRC(P0, P1, P3, d1);
				}
				// fill d2
				if (m_Outputs.GUI_Buff[indexOfGui] == 1) // LIN
				{
					for (i = 0; i < 8; i++) {
						P2[i] = m_Outputs.GUI_Buff[++indexOfGui];
					}
					for (i = 0; i < 8; i++) {
						P1[i] = d1[i].q[d1[0].TrajLength-1];
					}
					trajectory.LIN(P1, P2, trajectory.toolParamGlobal, is_first, is_end, d2);
					trajectory.Approximation(d1, d2, P1[7], d3, indexPre, indexNext);
					//fill data of traj1
					for (i = 0; i < indexPre; i++) // can also copy whole array
					{
						targetPoints[i] = d1[i];
					}
					//fill approximation's data
					for (int i = 0; i < d3[0].TrajLength; i++)
					{
						targetPoints[indexPre + i] = d3[i];
					}
				}
				else if (m_Outputs.GUI_Buff[indexOfGui] == 2) // CIRC
				{
					// call circ

					//trajectory.Approximation(d1, d2, P1[7], d3, indexPre, indexNext);
					////fill data of traj1
					//for (i = 0; i < indexPre; i++) // can also copy whole array
					//{
					//	targetPoints[i] = d1[i];
					//}
					////fill approximation's data
					//for (int i = 0; i < d3[0].TrajLength; i++)
					//{
					//	targetPoints[indexPre + i] = d3[i];
					//}

				}
				else if (m_Outputs.GUI_Buff[indexOfGui] == 3) // end of buffer
				{
					//fill data of traj1
					for (i = 0; i < d1[0].TrajLength; i++) 
					{
						targetPoints[i] = d1[i];
					}
				}
				
			}



			//for (i = 0; i < 6; i++) {
			//	actualPos[i] = (actualPos[i] * M_PI) / 180.0; //to radian
			//}
			//trajectory.LIN(actualPos, targetPos, trajectory.toolParamGlobal, targetPoints);
			break;
		case 98: // Home
			targetPos[0] = 0;
			targetPos[1] = 0;
			targetPos[2] = 0;
			targetPos[3] = 0;
			targetPos[4] = 0;
			targetPos[5] = 0;
			targetPos[6] = 50;
			targetPos[7] = 0;
			trajectory.PTPList(actualPos, targetPos, targetPoints);
				break;
		case 100:
			//nothing
			break;
		}
		while (targetPoints[0].TrajLength > index_point) {
			for (i = 0; i < 8; i++) {
				DQPath[i] = targetPoints[i].q[index_point];
			}
			trajectory.Inversekinematic(DQPath, trajectory.QbaseGlobal, trajectory.toolParamGlobal, actualPos, res);//, res);
			for (i = 0; i < 6; i++) {
				global.set_dataPoint(i, (long)(res[i] * (1.0 / trajectory.PulsToDegFactor1[i])));
			}
			index_point++;
		}
		global.GUI_GetNextCMD = 1;
	}
		
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CGenerator::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if (m_spCyclicCaller.HasOID())
	{
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)))
		{
			if (FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))))
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID;
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CGenerator::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spCyclicCaller)
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

